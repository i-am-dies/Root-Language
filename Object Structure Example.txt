@1 => {
	TestClass: @2 => class { ... },
	testPi: 3.14,
	testClassInstance: @4 => instance { ... }
} <= {
	address: 1,
	type: 'namespace',
	inheritance: [],
	members: [
		{
			accesibility: ['public', 'static'],
			title: 'TestClass',
			typed: true,
			inheritance: [2],
			value: '2'
		},
		{
			accesibility: ['public', 'static', 'constant'],
			title: 'testPi',
			typed: true,
			inheritance: ['float'],
			value: '3.14'
		},
		{
			accesibility: ['public', 'static'],
			title: 'testClassInstance',
			typed: true,
			inheritance: [2],
			value: '4'
		}
	],
	observers: [
		/*
		{
			type: ['property', 'testPi'], // ['chain'], ['subscript']
			willGet: 4,
			get: nil,
			didGet: nil,
			willSet: nil,
			set: nil,
			didSet: nil
		}
		*/
	],
	scope: nil,
	retains: 1
}

@2 => {
	init: @3 => (firstArgument: float, secondArgument: bool) -> bool { ... },
	testVariable: nil
} <= {
	address: 2,
	type: 'class',
	inheritance: [],
	members: [
		{
			accesibility: ['public', 'static'],
			title: 'init',
			typed: true,
			inheritance: [3],
			value: '3'
		},
		{
			accesibility: ['public'],
			title: 'testVariable',
			typed: true,
			inheritance: ['int'],
			value: nil
		}
	],
	observers: [],
	scope: 1,
	retains: 1
}

@3 => (firstArgument: float, secondArgument: bool) -> bool {
	testVariable = 2 print('Test: '+firstArgument)

	return secondArgument
} <= {
	address: 3,
	type: 'function',
	signature: [
		{
			title: 'firstArgument',
			typed: true,
			inheritance: ['float']
		},
		{
			title: 'secondArgument',
			typed: true,
			inheritance: ['bool']
		},
		{
			title: 'return',
			typed: true,
			inheritance: ['bool']
		}
	],
	body: (body code),
	scope: 2,
	retains: 1
}

@4 => {
	testVariable: 2
} <= {
	address: 4,
	type: 'instance',
	inheritance: [2],
	members: [
		{
			accesibility: [],
			title: 'testVariable',
			typed: true,
			inheritance: [],
			value: '2'
		}
	],
	observers: [],
	scope: nil,
	retains: 1
}

types: [
	{
		set: 'simple',
		subset: 'class',
		inheritance: []
	},
	{
		set: 'compound',
		subset: 'function'
	}
]