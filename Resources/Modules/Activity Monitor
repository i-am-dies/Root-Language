import Leaf

class Main {
	var table

	init() awaits {
		LFApp.menuItems = [
			LFMenuItem(menu:
				LFMenu(items: [
					LFMenuItem(title: await CFLocalizedString('About')+' '+LFApp.title, action: { LFApp.about() }),
					LFMenuItem().separator(),
					LFMenuItem(title: await CFLocalizedString('Services')),
					LFMenuItem().separator(),
					LFMenuItem(title: await CFLocalizedString('Hide')+' '+LFApp.title),
					LFMenuItem(title: await CFLocalizedString('Hide others')),
					LFMenuItem(title: await CFLocalizedString('Show all')),
					LFMenuItem().separator(),
					LFMenuItem(title: await CFLocalizedString('Quit')+' '+LFApp.title, action: { LFApp.quit() })
				])
			),
			LFMenuItem(title: await CFLocalizedString('File'), menu:
				LFMenu(items: [
					LFMenuItem(title: await CFLocalizedString('Switch'), action: { switch() }),
					LFMenuItem(title: await CFLocalizedString('Quit'), action: { quit() })
				])
			),
			LFMenuItem(title: await CFLocalizedString('Edit')),
			LFMenuItem(title: await CFLocalizedString('View'), menu:
				LFMenu(items: [
					LFMenuItem(title: await CFLocalizedString('Update'), action: { update() })
				])
			),
			LFMenuItem(title: await CFLocalizedString('Window')),
			LFMenuItem(title: await CFLocalizedString('Help'))
		]
		LFApp.quitableBySingleWindow = true

		LFWindow(width: 512, height: 256, title: LFApp.title,
			toolbar: LFToolbar(subviews: [
				LFButton(title: '', image: await LFImage(shared: 'TemplateQuit'), action: { quit() }),
				LFButton(title: '', image: await LFImage(shared: 'TemplateInfo'), action: { information() })
			]),
			view: LFView(tight: true, yAlign: 'stretch', subviews: [
				LFTable()
			])
		).center()

		table = LFApp.windows[0].view.subviews[0]
		update()
		CFEvent.addHandler('processListChanged', { update() })
		CFArrayOld.addObserver(LFWorkspace.shared.launchedApplications, { update() })
	}

	func update() {
		var update = []

		for v in _call('list') {
			var process = _call('info', v),
				application = LFWorkspace.shared.launchedApplications.find { $0.processIdentifier == process.ID },
				title = application?.title ?? process.path.split('/').pop()

			update.push(LFTableRow(title: title, data: [ 'title': title, 'process': process, 'application': application ], action: { application?.focus() }))
		}

		table.subviews = update
	}

	func quit() {
		var activeRow = table.activeRow

		if !activeRow {
			return
		}
		if activeRow.data.application {
			activeRow.data.application.quit()

			return
		}

		_call('kill', activeRow.data.process.ID)
	}

	func switch() {
		table.activeRow?.data.application?.focus()
	}

	func information() awaits {
		var title = table.activeRow?.data.title,
			process = table.activeRow?.data.process,
			application = table.activeRow?.data.application

		var window = LFApp.windows.find { $0.tag == process.ID }

		if !window {
			LFWindow(tag: process.ID, width: 384, type: ['titled', 'closable', 'minimizable'], title: title, view:
				LFView(type: 'vertical', subviews: [
					LFView(subviews: [
						LFView(type: 'vertical', tight: true, subviews: [
							LFText(string: 'Process', size: 'small', weight: 'bold'),
							LFText(string: 'Terminal', size: 'small', weight: 'bold'),
							LFText(string: 'User', size: 'small', weight: 'bold')
						] * application?.bundleURL ? [LFText(string: 'Bundle', size: 'small', weight: 'bold')] : [],
						  * application?.identifier ? [LFText(string: 'Identifier', size: 'small', weight: 'bold')] : []
						),
						LFView(type: 'vertical', tight: true, subviews: [
							LFText(string: process.path.split('/').pop()+' ('+process.ID+')', size: 'small'),
							LFText(string: process.terminalID, size: 'small'),
							LFText(string: process.user, size: 'small')
						] * application?.bundleURL ? [LFText(string: application.bundleURL, size: 'small')] : []
						  * application?.identifier ? [LFText(string: application.identifier, size: 'small')] : []
						)
					]),
					LFButton(title: await CFLocalizedString('Quit'), action: func () {
						get('Superview', LFWindow).close()
						if application {
							application.quit()
						} else {
							_call('kill', process.ID)
						}
					})
				])
			)
		} else {
			window.focus()
		}
	}
}